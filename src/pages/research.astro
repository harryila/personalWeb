---
import Layout from "@/layouts/Layout.astro";
import { profile } from "@/settings";
import { publications } from "@/data/cv";
import List from "@/components/ui/List.astro";
import { highlightAuthor } from "@/lib/utils";
import {template} from "@/settings";

const { research_areas } = profile;

// Function to get tag color
function getTagColor(tag: string) {
  const colors = [
    "badge-primary", "badge-secondary", "badge-accent", 
    "badge-info", "badge-success", "badge-warning"
  ];
  return colors[tag.length % colors.length];
}

// Current projects data with category mapping
const currentProjects = [
  {
    title: "Quantization-Aware AI Safety",
    description: "Developing efficient model compression techniques that preserve alignment properties and safety characteristics in large language models.",
    category: "efficient-ml",
    tags: ["Efficient ML", "AI Safety"]
  },
  {
    title: "Multi-Agent Coordination Systems", 
    description: "Exploring collaborative AI frameworks where multiple agents learn and reason together, focusing on emergent behaviors and distributed problem-solving.",
    category: "multi-agent",
    tags: ["Multi-Agent Learning"]
  },
  {
    title: "Educational Equity Analytics",
    description: "Building human-centered data-driven tools to analyze and improve dual-enrollment program accessibility and outcomes for underserved student populations.",
    category: "human-centered-ml", 
    tags: ["Human-Centered ML"]
  },
  {
    title: "Neural Network Interpretability",
    description: "Advancing mechanistic understanding of deep learning models through detailed analysis of internal representations and decision-making processes.",
    category: "mechanistic-interpretability",
    tags: ["Mechanistic Interpretability"]
  },
  {
    title: "Convex Optimization for ML",
    description: "Developing custom solvers and optimization algorithms with theoretical foundations for enhanced machine learning applications.",
    category: "convex-optimization",
    tags: ["Convex Optimization"]
  },
  {
    title: "AI Safety Alignment Framework",
    description: "Comprehensive tools for measuring and improving model calibration with focus on toxicity mitigation, alignment, and safety evaluation using TruthfulQA and RealToxicityPrompts datasets.",
    category: "ai-safety",
    tags: ["AI Safety"]
  }
];
---

<Layout title="Research | Harutyun Harry Ilanyan">
  <div class="prose max-w-none">
    <h1 class="text-3xl font-bold mb-8">Research</h1>

    <div class="mb-12">
      <p class="text-lg mb-6">
        My research spans the intersection of machine learning efficiency, optimization theory, and societal impact. I focus on developing practical solutions that bridge theoretical foundations with real-world applications, particularly in model compression, safety-aligned AI systems, and data-driven approaches to social challenges.
      </p>
      <p class="text-lg mb-6">
        Through interdisciplinary collaboration and rigorous experimentation, I aim to advance our understanding of how AI systems can be made more efficient, reliable, and beneficial to society while maintaining strong theoretical foundations.
      </p>
    </div>

    <!-- Current Projects with Filter functionality -->
    <div class="not-prose mb-12">
      <h2 class="text-2xl font-bold mb-6">Current Projects</h2>
      
      <!-- Filter buttons -->
      <div class="mb-6 flex flex-wrap gap-2 justify-center">
        <div class="join">
          <button class="join-item btn btn-sm btn-active filter-btn" data-filter="all">All</button>
          <button class="join-item btn btn-sm filter-btn" data-filter="efficient-ml">Efficient ML</button>
          <button class="join-item btn btn-sm filter-btn" data-filter="multi-agent">Multi-Agent</button>
          <button class="join-item btn btn-sm filter-btn" data-filter="convex-optimization">Optimization</button>
          <button class="join-item btn btn-sm filter-btn" data-filter="mechanistic-interpretability">Interpretability</button>
          <button class="join-item btn btn-sm filter-btn" data-filter="ai-safety">AI Safety</button>
          <button class="join-item btn btn-sm filter-btn" data-filter="human-centered-ml">Human-Centered</button>
        </div>
      </div>

      <!-- Projects in rectangular layout -->
      <div class="space-y-4" id="projects-container">
        {currentProjects.map((project) => (
          <div class={`project-card bg-base-200 rounded-lg p-6 transition-all duration-300 hover:shadow-lg hover:bg-base-300`} data-category={project.category}>
            <div class="flex flex-col md:flex-row md:items-center md:justify-between">
              <div class="flex-1 mb-3 md:mb-0 md:mr-6">
                <h3 class="text-xl font-semibold mb-2 text-primary">{project.title}</h3>
                <p class="text-base-content/80 leading-relaxed">{project.description}</p>
              </div>
              <div class="flex flex-wrap gap-1 md:flex-col md:items-end">
                {project.tags.map((tag) => (
                  <div class={`badge ${getTagColor(tag)} badge-sm`}>
                    {tag}
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <h2 class="text-2xl font-bold mb-6 mt-12">Publications</h2>
    
    <div class="space-y-8 not-prose">
      {
        publications.map((paper) => (
          <div class="card bg-base-200">
            <div class="card-body">
              <h3 class="card-title text-xl">
                <a href={paper.link} class="text-blue-600 hover:text-blue-800 transition-colors" target="_blank">
                  {paper.title}
                </a>
              </h3>
              <p class="text-base mb-2">
                <span class="font-medium">Authors:</span>{" "}
                <span set:html={highlightAuthor(paper.authors)} />
              </p>
              <p class="text-sm mb-3">
                <span class="italic">{paper.journal}</span> â€¢ {paper.time}
              </p>
              {paper.tags && paper.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-3">
                  {paper.tags.map((tag) => (
                    <div class={`badge ${getTagColor(tag)} badge-sm`}>
                      {tag}
                    </div>
                  ))}
                </div>
              )}
              <p class="text-sm text-base-content/80 leading-relaxed">{paper.abstract}</p>
              <div class="card-actions justify-end mt-4">
                <a href={paper.link} class="btn btn-sm text-white bg-blue-600 hover:bg-blue-700 border-blue-600 hover:border-blue-700 transition-colors" target="_blank">
                  Read Paper
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>

<script>
  // Filter functionality for current projects - improved version that works with client-side routing
  function initializeFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLButtonElement>;
    const projectCards = document.querySelectorAll('.project-card') as NodeListOf<HTMLElement>;

    // Exit if elements don't exist yet
    if (!filterButtons.length || !projectCards.length) return;

    filterButtons.forEach(button => {
      // Remove any existing listeners to prevent duplicates
      button.removeEventListener('click', handleFilterClick);
      button.addEventListener('click', handleFilterClick);
    });

    function handleFilterClick(this: HTMLButtonElement) {
      const filter = this.getAttribute('data-filter');
      
      // Update active state
      filterButtons.forEach(btn => btn.classList.remove('btn-active'));
      this.classList.add('btn-active');
      
      // Filter projects
      projectCards.forEach(card => {
        const cardElement = card as HTMLElement;
        if (filter === 'all' || cardElement.getAttribute('data-category') === filter) {
          cardElement.style.display = 'block';
          // Add fade-in animation
          cardElement.style.opacity = '0';
          setTimeout(() => {
            cardElement.style.opacity = '1';
          }, 50);
        } else {
          cardElement.style.display = 'none';
        }
      });
    }
  }

  // Initialize immediately if DOM is ready, otherwise wait
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }

  // Also initialize on Astro's page load events for client-side routing
  document.addEventListener('astro:page-load', initializeFilters);
</script>

<style>
  .project-card {
    transition: opacity 0.3s ease-in-out;
  }
</style>
