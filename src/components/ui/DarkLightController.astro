---
import {template} from  '../../settings.ts'
---

<label class="grid cursor-pointer place-items-center" transition:persist>
  <input
    type="checkbox"
    value={template.darkTheme}
    class="toggle theme-controller bg-base-content col-span-2 col-start-1 row-start-1 main-theme-toggle"
    data-choose-theme
/>
  <svg
    class="stroke-base-100 fill-base-100 col-start-1 row-start-1"
    xmlns="http://www.w3.org/2000/svg"
    width="14"
    height="14"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <circle cx="12" cy="12" r="5" />
    <path
      d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4" />
  </svg>
  <svg
    class="stroke-base-100 fill-base-100 col-start-2 row-start-1"
    xmlns="http://www.w3.org/2000/svg"
    width="14"
    height="14"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</label>

<script>
// Main toggle synchronization with palette system
function initializeMainToggle() {
  const mainToggle = document.querySelector('.main-theme-toggle');
  if (!mainToggle) return;
  
  // Initialize state from localStorage
  const isDarkMode = localStorage.getItem('isDarkMode') === 'true';
  const selectedLightTheme = localStorage.getItem('selectedLightTheme') || 'light';
  const selectedDarkTheme = localStorage.getItem('selectedDarkTheme') || 'dark';
  
  mainToggle.checked = isDarkMode;
  
  // Handle toggle changes
  mainToggle.addEventListener('change', function() {
    const isDarkMode = this.checked;
    
    // Update localStorage
    localStorage.setItem('isDarkMode', isDarkMode.toString());
    
    // Get current palette themes
    const currentLightTheme = localStorage.getItem('selectedLightTheme') || 'light';
    const currentDarkTheme = localStorage.getItem('selectedDarkTheme') || 'dark';
    
    // Apply the appropriate theme
    const newTheme = isDarkMode ? currentDarkTheme : currentLightTheme;
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    
    // Dispatch event for palette page sync
    window.dispatchEvent(new CustomEvent('mainToggleChanged', {
      detail: { 
        isDarkMode,
        lightTheme: currentLightTheme,
        darkTheme: currentDarkTheme
      }
    }));
  });
  
  // Listen for palette changes
  window.addEventListener('paletteThemeChanged', function(event) {
    const { isDarkMode } = event.detail;
    mainToggle.checked = isDarkMode;
  });
}

// Initialize on load
document.addEventListener('DOMContentLoaded', initializeMainToggle);

// Re-initialize after page transitions
document.addEventListener('astro:after-swap', initializeMainToggle);
</script>
