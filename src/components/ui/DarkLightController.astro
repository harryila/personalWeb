---
import {template} from  '../../settings.ts'
---

<label class="grid cursor-pointer place-items-center" transition:persist>
  <input
    type="checkbox"
    value={template.darkTheme}
    class="toggle theme-controller bg-base-content col-span-2 col-start-1 row-start-1 main-theme-toggle"
    id="main-theme-toggle"
/>
  <svg
    class="stroke-base-100 fill-base-100 col-start-1 row-start-1"
    xmlns="http://www.w3.org/2000/svg"
    width="14"
    height="14"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <circle cx="12" cy="12" r="5" />
    <path
      d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4" />
  </svg>
  <svg
    class="stroke-base-100 fill-base-100 col-start-2 row-start-1"
    xmlns="http://www.w3.org/2000/svg"
    width="14"
    height="14"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</label>

<script>
// Enhanced main theme toggle that works with palette system
document.addEventListener('DOMContentLoaded', function() {
  const mainToggle = document.getElementById('main-theme-toggle');
  
  if (mainToggle) {
    // Initialize toggle state based on current theme
    initializeMainToggle();
    
    // Handle main toggle changes
    mainToggle.addEventListener('change', function() {
      const isDarkMode = this.checked;
      
      // Get current saved palette themes or use defaults
      const selectedLightTheme = localStorage.getItem('selectedLightTheme') || 'light';
      const selectedDarkTheme = localStorage.getItem('selectedDarkTheme') || 'dark';
      
      // Apply appropriate theme
      const newTheme = isDarkMode ? selectedDarkTheme : selectedLightTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      
      // Update localStorage
      localStorage.setItem('theme', newTheme);
      localStorage.setItem('isDarkMode', isDarkMode.toString());
      
      // Dispatch event for other components to sync
      window.dispatchEvent(new CustomEvent('themeToggled', {
        detail: { isDarkMode, theme: newTheme }
      }));
    });
    
    // Listen for theme changes from other components
    window.addEventListener('paletteChanged', function(e) {
      const { lightTheme, darkTheme, isDarkMode } = e.detail;
      
      // Apply the theme
      const newTheme = isDarkMode ? darkTheme : lightTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      
      // Update localStorage
      localStorage.setItem('selectedLightTheme', lightTheme);
      localStorage.setItem('selectedDarkTheme', darkTheme);
      localStorage.setItem('isDarkMode', isDarkMode.toString());
      localStorage.setItem('theme', newTheme);
      
      // Update main toggle to match
      mainToggle.checked = isDarkMode;
    });
    
    // Listen for mode toggle from palette page
    window.addEventListener('modeToggled', function(e) {
      const { isDarkMode } = e.detail;
      
      // Get current palette themes or use defaults
      const selectedLightTheme = localStorage.getItem('selectedLightTheme') || 'light';
      const selectedDarkTheme = localStorage.getItem('selectedDarkTheme') || 'dark';
      
      // Apply appropriate theme
      const newTheme = isDarkMode ? selectedDarkTheme : selectedLightTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      
      // Update localStorage
      localStorage.setItem('isDarkMode', isDarkMode.toString());
      localStorage.setItem('theme', newTheme);
      
      // Update main toggle to match
      mainToggle.checked = isDarkMode;
    });
    
    // Listen for theme changes from other sources
    window.addEventListener('themeToggled', function(e) {
      const { isDarkMode } = e.detail;
      mainToggle.checked = isDarkMode;
    });
  }
  
  function initializeMainToggle() {
    // Get current theme state
    const isDarkMode = localStorage.getItem('isDarkMode') === 'true';
    const currentTheme = document.documentElement.getAttribute('data-theme');
    
    // Set toggle state based on current theme
    if (currentTheme && currentTheme.includes('dark')) {
      mainToggle.checked = true;
    } else if (isDarkMode) {
      mainToggle.checked = true;
    } else {
      mainToggle.checked = false;
    }
  }
});
</script>
