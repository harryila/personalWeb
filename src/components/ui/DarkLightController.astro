---
import {template} from  '../../settings.ts'
---

<label class="grid cursor-pointer place-items-center" transition:persist>
  <input
    type="checkbox"
    value={template.darkTheme}
    class="toggle theme-controller bg-base-content col-span-2 col-start-1 row-start-1 main-theme-toggle"
    data-choose-theme
/>
  <svg
    class="stroke-base-100 fill-base-100 col-start-1 row-start-1"
    xmlns="http://www.w3.org/2000/svg"
    width="14"
    height="14"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <circle cx="12" cy="12" r="5" />
    <path
      d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4" />
  </svg>
  <svg
    class="stroke-base-100 fill-base-100 col-start-2 row-start-1"
    xmlns="http://www.w3.org/2000/svg"
    width="14"
    height="14"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</label>

<script>
  // Enhanced main theme toggle to work with palette persistence
  function initializeDarkLightController() {
    const mainToggle = document.querySelector('.main-theme-toggle') as HTMLInputElement;
    
    if (!mainToggle) return;
    
    // Initialize main toggle state
    initializeMainToggleState();
    
    // Handle main toggle changes
    mainToggle.addEventListener('change', function(this: HTMLInputElement) {
      const isDarkMode = this.checked;
      
      // Check if user has a selected palette
      const selectedLightTheme = localStorage.getItem('selectedLightTheme');
      const selectedDarkTheme = localStorage.getItem('selectedDarkTheme');
      
      // Save the dark mode preference
      localStorage.setItem('isDarkMode', isDarkMode.toString());
      
      if (selectedLightTheme && selectedDarkTheme) {
        // Apply the palette theme with new mode
        const newTheme = isDarkMode ? selectedDarkTheme : selectedLightTheme;
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        // Notify palette page to update its toggles
        window.dispatchEvent(new CustomEvent('mainToggleChanged', {
          detail: { isDarkMode, lightTheme: selectedLightTheme, darkTheme: selectedDarkTheme }
        }));
      } else {
        // Use default themes - set default palette
        const defaultLight = 'light';
        const defaultDark = 'dark';
        localStorage.setItem('selectedLightTheme', defaultLight);
        localStorage.setItem('selectedDarkTheme', defaultDark);
        
        const newTheme = isDarkMode ? defaultDark : defaultLight;
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        // Notify palette page
        window.dispatchEvent(new CustomEvent('mainToggleChanged', {
          detail: { isDarkMode, lightTheme: defaultLight, darkTheme: defaultDark }
        }));
      }
    });
    
    // Listen for palette theme changes to update main toggle
    window.addEventListener('paletteThemeChanged', function(event) {
      const customEvent = event as CustomEvent;
      const { isDarkMode } = customEvent.detail;
      if (mainToggle.checked !== isDarkMode) {
        mainToggle.checked = isDarkMode;
      }
    });
    
    function initializeMainToggleState() {
      const isDarkMode = localStorage.getItem('isDarkMode') === 'true';
      const selectedLightTheme = localStorage.getItem('selectedLightTheme');
      const selectedDarkTheme = localStorage.getItem('selectedDarkTheme');
      
      // Set toggle state based on saved preference
      mainToggle.checked = isDarkMode;
      
      // Apply correct theme if we have a saved palette
      if (selectedLightTheme && selectedDarkTheme) {
        const currentTheme = isDarkMode ? selectedDarkTheme : selectedLightTheme;
        document.documentElement.setAttribute('data-theme', currentTheme);
        localStorage.setItem('theme', currentTheme);
      } else {
        // Set defaults
        localStorage.setItem('selectedLightTheme', 'light');
        localStorage.setItem('selectedDarkTheme', 'dark');
        const currentTheme = isDarkMode ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', currentTheme);
        localStorage.setItem('theme', currentTheme);
      }
    }
  }
  
  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', initializeDarkLightController);
  
  // Re-initialize after page transitions
  document.addEventListener('astro:after-swap', initializeDarkLightController);
</script>
