---
import {template} from '@/settings'
interface Props {
	title: string
	description: string
	image: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image } = Astro.props
---

<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link
	rel='icon'
	type='image/png'
	href='/favicon.png'
/>
<meta name='generator' content={Astro.generator} />

<!-- Sitemap -->
<link rel="sitemap" href=`${template.base}/sitemap-index.xml` />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name='title' content={title} />
<meta name='description' content={description} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content='website' />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image, Astro.url)} />

<!-- Enhanced Theme System with Palette Persistence -->
<script is:inline define:vars={{lightTheme: template.lightTheme, darkTheme: template.darkTheme}}>
  // Enhanced theme management for palette persistence
  function getPaletteTheme() {
    // Check if user has selected a palette theme
    const selectedLightTheme = localStorage.getItem('selectedLightTheme');
    const selectedDarkTheme = localStorage.getItem('selectedDarkTheme');
    const isDarkMode = localStorage.getItem('isDarkMode') === 'true';
    
    // If palette themes are selected, use them
    if (selectedLightTheme && selectedDarkTheme) {
      return isDarkMode ? selectedDarkTheme : selectedLightTheme;
    }
    
    // Otherwise, fall back to default theme based on dark mode preference
    const currentTheme = localStorage.getItem('theme');
    if (currentTheme) {
      return currentTheme;
    }
    
    // Final fallback - check if dark mode is preferred
    return isDarkMode ? darkTheme : lightTheme;
  }

  // Apply theme immediately to prevent flash
  const currentTheme = getPaletteTheme();
  document.documentElement.setAttribute('data-theme', currentTheme);

  // Save current theme to localStorage for consistency
  localStorage.setItem('theme', currentTheme);

  // Re-apply theme after navigation
  document.addEventListener('astro:after-swap', () => {
    const theme = getPaletteTheme();
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  });

  // Listen for palette changes from palette tester
  window.addEventListener('paletteChanged', (event) => {
    const { lightTheme, darkTheme, isDarkMode } = event.detail;
    
    // Save palette selection
    localStorage.setItem('selectedLightTheme', lightTheme);
    localStorage.setItem('selectedDarkTheme', darkTheme);
    localStorage.setItem('isDarkMode', isDarkMode);
    
    // Apply the appropriate theme
    const newTheme = isDarkMode ? darkTheme : lightTheme;
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
  });

  // Listen for mode toggle (light/dark within selected palette)
  window.addEventListener('modeToggled', (event) => {
    const { isDarkMode } = event.detail;
    const selectedLightTheme = localStorage.getItem('selectedLightTheme');
    const selectedDarkTheme = localStorage.getItem('selectedDarkTheme');
    
    if (selectedLightTheme && selectedDarkTheme) {
      localStorage.setItem('isDarkMode', isDarkMode);
      const newTheme = isDarkMode ? selectedDarkTheme : selectedLightTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
    } else {
      // Fallback to default themes if no palette selected
      localStorage.setItem('isDarkMode', isDarkMode);
      const newTheme = isDarkMode ? darkTheme : lightTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
    }
  });

  // Listen for theme changes from main toggle
  window.addEventListener('themeToggled', (event) => {
    const { isDarkMode, theme } = event.detail;
    // Theme is already applied by the main toggle, just ensure consistency
    localStorage.setItem('isDarkMode', isDarkMode);
    localStorage.setItem('theme', theme);
  });
</script>
<!-- Note: Using custom theme system instead of DaisyUI themeChange to avoid conflicts -->
