---
import {template} from '@/settings'
interface Props {
	title: string
	description: string
	image: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image } = Astro.props
---

<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link
	rel='icon'
	type='image/png'
	href='/favicon.png'
/>
<meta name='generator' content={Astro.generator} />

<!-- Sitemap -->
<link rel="sitemap" href=`${template.base}/sitemap-index.xml` />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name='title' content={title} />
<meta name='description' content={description} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content='website' />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image, Astro.url)} />

<!-- Silk Theme System - Starts with Dark Mode -->
<script is:inline define:vars={{lightTheme: template.lightTheme, darkTheme: template.darkTheme}}>
  // Simple theme management - defaults to dark mode
  function getTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      return savedTheme;
    }
    
    // Default to dark mode as requested
    const isDarkMode = localStorage.getItem('isDarkMode');
    if (isDarkMode === null) {
      // First visit - default to dark mode
      localStorage.setItem('isDarkMode', 'true');
      return darkTheme;
    }
    
    return isDarkMode === 'true' ? darkTheme : lightTheme;
  }

  // Apply theme immediately to prevent flash
  const theme = getTheme();
  document.documentElement.setAttribute('data-theme', theme);

  // Listen for theme changes from the toggle
  window.addEventListener('themeToggled', (event) => {
    const { isDarkMode } = event.detail;
    const newTheme = isDarkMode ? darkTheme : lightTheme;
    
    localStorage.setItem('theme', newTheme);
    localStorage.setItem('isDarkMode', isDarkMode.toString());
    document.documentElement.setAttribute('data-theme', newTheme);
  });
</script>

<script>
	import { themeChange } from 'theme-change'
	themeChange()
</script>
<!-- Note: Using enhanced theme system with DaisyUI themeChange for compatibility -->
